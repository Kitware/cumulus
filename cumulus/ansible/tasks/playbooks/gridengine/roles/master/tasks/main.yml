- name: Install grid engine packages on master node
  apt:
    name="{{ packages }}"
    state=present
    update_cache=yes
  become_user: root
  vars:
    packages:
    - gridengine-client
    - gridengine-master
    - gridengine-exec
  tags:
    - master

- name: Install NFS server package
  apt: name=nfs-kernel-server state=present
  become_user: root
  when: '"exec" in groups'
  tags:
    - master
    - nfs-server

- name: Stop NFS server
  service: name=nfs-kernel-server state=stopped
  when: '"exec" in groups'
  tags:
    - master
    - nfs-server


- name: Export directories via NFS
  become_user: root
  template: src=export.j2 dest=/etc/exports force=true
  when: '"exec" in groups'
  tags:
    - master
    - nfs-server

- name: Start NFS server
  service: name=nfs-kernel-server state=started
  when: '"exec" in groups'
  tags:
    - master
    - nfs-server

- name: Add master node as the submit host
  become_user: sgeadmin
  shell: qconf -as {{ ansible_hostname }}
  # ignore_errors: true
  tags:
    - master

- name: Debug IP address
  become_user: sgeadmin
  debug:
    msg: Private {{hostvars[item].private_ip}} template {{hostvars[item].private_ip|default(hostvars[item].ansible_hostname)}}
  with_items:
    - "{{ groups.exec | default([]) + groups.master }}"
  tags:
    - master

- name: Template exec host files
  become_user: sgeadmin
  template: src=exec_host.j2 dest=/tmp/exec_host_{{item}}
  with_items:
    - "{{ groups.exec | default([]) + groups.master }}"
  tags:
    - master

- name: Add exec hosts
  become_user: sgeadmin
  shell: qconf -Ae /tmp/exec_host_{{item}}
  # ignore_errors: true
  with_items:
    - "{{ groups.exec | default([]) + groups.master }}"
  tags:
    - master

- name: Find exec host files
  become_user: sgeadmin
  find:
    paths: /tmp
    patterns: exec_host*
  register: files_to_delete
  tags:
    - master

- name: Cleanup exec host files
  become_user: sgeadmin
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"
  ignore_errors: true
  tags:
    - master

- name: Check if @allhosts host group exists
  become_user: sgeadmin
  shell: qconf -shgrp @allhosts
  ignore_errors: true
  register: qconf_shgrp
  tags:
  - master

- name: Template allhosts host group file
  become_user: sgeadmin
  template: src=allhosts.j2 dest=/tmp/allhosts
  when: qconf_shgrp.rc != 0
  tags:
    - master

- name: Create allhosts host group
  become_user: sgeadmin
  shell: qconf -Ahgrp /tmp/allhosts
  when: qconf_shgrp.rc != 0
  tags:
    - master

- name: Clean allhosts file
  become_user: sgeadmin
  file: path=/tmp/allhosts state=absent
  when: qconf_shgrp.rc != 0
  tags:
    - master

- name: Check if master host group exists
  become_user: sgeadmin
  shell: qconf -shgrp @master
  ignore_errors: true
  register: qconf_shgrp
  tags:
  - master

- name: Template master host group file
  become_user: sgeadmin
  template: src=master.j2 dest=/tmp/master
  when: qconf_shgrp.rc != 0
  tags:
    - master

- name: Create master host group
  become_user: sgeadmin
  shell: qconf -Ahgrp /tmp/master
  when: qconf_shgrp.rc != 0
  tags:
    - master

- name: Clean master file
  become_user: sgeadmin
  file: path=/tmp/master state=absent
  when: qconf_shgrp.rc != 0
  tags:
    - master

- name: Check if parallel environment exists
  become_user: sgeadmin
  shell: qconf -sp orte
  ignore_errors: true
  register: qconf_spl
  tags:
  - master

- name: Template parallel environment configuration
  become_user: sgeadmin
  template: src=pe.j2 dest=/tmp/pe
  when: qconf_spl.rc != 0
  tags:
  - master

- name: Create parallel environment
  become_user: sgeadmin
  shell: qconf -Ap /tmp/pe
  when: qconf_spl.rc != 0
  tags:
  - master

- name: Clean up pe configuration
  become_user: root
  file: path=/tmp/pe state=absent
  when: qconf_spl.rc != 0
  tags:
    - master

- name: Template all.q configuration
  become_user: sgeadmin
  template: src=all.q.j2 dest=/tmp/all.q
  tags:
    - master

- name: Check if all.q exists
  become_user: sgeadmin
  shell: qconf -sq all.q
  ignore_errors: true
  register: qconf_sq
  tags:
  - master

- name: Create all.q
  become_user: sgeadmin
  shell: qconf -Aq /tmp/all.q
  when: qconf_sq.rc != 0
  tags:
    - master

- name: Clean up all.q
  become_user: sgeadmin
  file: path=/tmp/all.q state=absent
  when: qconf_sq.rc != 0
  tags:
    - master

- name: Adding all hosts to queue
  become_user: sgeadmin
  shell: qconf -aattr queue hostlist @allhosts all.q
  ignore_errors: true
  tags:
    - master

- name: Copy over sched_conf
  become_user: sgeadmin
  copy: src=sched_conf dest=/tmp/sched_conf
  tags:
    - master

- name: Configure for on demand scheduling
  become_user: sgeadmin
  shell:  qconf -Msconf /tmp/sched_conf
  tags:
    - master

- name: Clean up sched_conf
  become_user: sgeadmin
  file: path=/tmp/sched_conf state=absent
  tags:
    - master

- name: Generate SSH key for access between nodes
  user: name=ubuntu generate_ssh_key=yes
  tags:
    - master

- name: Add key to authorize_key file
  become_user: ubuntu
  shell: cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
  tags:
  - master

- name: Get all resolved hostname in host group
  become_user: ubuntu
  shell: qconf -shgrp_resolved @allhosts
  register: hosts
  tags:
  - master

- name: Add all host keys to known_hosts
  become_user: ubuntu
  shell: ssh-keyscan -H {{item}} >> ~/.ssh/known_hosts
  with_items: "{{ hosts.stdout.split(' ') }}"
  tags:
  - master


