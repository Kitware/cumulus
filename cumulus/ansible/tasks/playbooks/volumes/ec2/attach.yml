---
- hosts: head
  tasks:
    - block:
        - fail:
            msg: "Profile ID must be passed in as profile_id"
          when: profile_id is not defined or profile_id == ""

        - name: Fail if instance_id is not set
          fail:
            msg: "Instance ID must be passed in as girder_instance_id"
          when: instance_id is not defined or instance_id == ""

        - name: Fail if path is not set
          fail:
            msg: "Path must be passed in as path"
          when: path is not defined or path == ""

        - name: Fail if volume_size is provided with volume_id
          fail:
            msg: "volume_size can not be provided with existing volume"
          when:  volume_id is defined and volume_id and volume_size is defined  and volume_size

        - ec2_vol:
            id: "{{ volume_id | default(omit) }}"
            name: "ec2_{{ profile_id }}_{{ volume_name }}"
            volume_size: "{{ volume_size | default(omit) }}"
            region: "{{ region }}"
            zone: "{{ volume_zone }}"
            instance: "{{ instance_id }}"
            device_name: /dev/xvdf
          delegate_to: localhost
          register: vol

        - ec2_tag:
            resource: "{{ vol.volume_id }}"
            region: "{{ volume_zone[:-1] }}"
            state: present
            tags:
              profile_id: "{{ profile_id }}"
          delegate_to: localhost

        # Patch the volume ID back to girder
        - girder:
            apiUrl: "{{ girder_api_url }}"
            token: "{{ girder_token }}"
            patch:
              path: "volumes/{{ girder_volume_id }}"
              data:
                ec2:
                  id: "{{ vol.volume_id }}"
          delegate_to: localhost
          when: girder_api_url is defined and girder_token is defined

        - filesystem:
            fstype: ext4
            dev: /dev/xvdf
          become: yes
          become_user: root

        - mount:
            name: "{{ path }}"
            src: /dev/xvdf
            state: mounted
            fstype: ext4
            opts: "rw,exec"
          become: yes
          become_user: root

        - file:
            state: directory
            path: "{{ path }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0755
          become: yes
          become_user: root

        - girder:
            apiUrl: "{{ girder_api_url }}"
            token: "{{ girder_token }}"
            put:
              path: "volumes/{{ girder_volume_id }}/clusters/{{ girder_cluster_id }}/attach/complete"
              data:
                path: "{{ path }}"
          delegate_to: localhost
          when: girder_api_url is defined and girder_token is defined and girder_volume_id is defined and girder_cluster_id is defined
      rescue:
        - girder:
            apiUrl: "{{ girder_api_url }}"
            token: "{{ girder_token }}"
            patch:
              path: "volumes/{{ girder_volume_id }}"
              data:
                status: 'error'
                msg: 'An error occured while attaching the volume, please check the logs'
          delegate_to: localhost
          when: girder_api_url is defined and girder_token is defined and girder_volume_id is defined
