---
# Find the Master AMI if master_instance_ami is not specified
- block:
    - name: Find latest Master AMI
      ec2_ami_find:
        state: available
        sort: creationDate
        sort_order: descending
        owner: "{{ master_ami_spec.owner }}"
        ami_tags: "{{ master_ami_spec.tags }}"
        region: "{{ cluster_region }}"
      register: master_amis

    - name: Register to master_instance_ami variable
      set_fact:
        master_instance_ami: "{{ master_amis.results[0]['ami_id'] }}"
  when: master_instance_ami is not defined

# Find the Node AMI if node_instance_ami is not specified
- block:
    - name: Find latest node AMI
      ec2_ami_find:
        state: available
        sort: creationDaten
        sort_order: descending
        owner: "{{ node_ami_spec.owner }}"
        ami_tags: "{{ node_ami_spec.tags }}"
        region: "{{ cluster_region }}"
      register: node_amis

    - name: Register to node_instance_ami variable
      set_fact:
        node_instance_ami: "{{ node_amis.results[0]['ami_id'] }}"
  when: node_instance_ami is not defined


# Create a custom security group if one is not passed in
- block:
    - name: Create a custom security group
      ec2_group:
        name: "ec2_pod_{{ cluster_id }}"
        description: >-
          security group for ec2 pod: {{ cluster_id }}
        region: "{{ cluster_region }}"
        rules: "{{ ec2_pod_rules }}"
        rules_egress: "{{ ec2_pod_rules_egress }}"

    - name: Register custom security group
      set_fact:
        ec2_security_group: "ec2_pod_{{ cluster_id }}"
  when: ec2_security_group is not defined

###
# Launch instances and wait for SSH to come up
#

- name: Launch master instance
  ec2:
    # Required vars
    instance_type: "{{ master_instance_type }}"
    image: "{{ master_instance_ami }}"
    region: "{{ cluster_region }}"
    zone: "{{ cluster_zone }}"
    key_name: "{{ aws_keyname }}"

    # Tags
    instance_tags:
      Name: ec2_pod_head
      ec2_pod: "{{ cluster_id }}"
      ec2_pod_instance_name: head
    count_tag:
      ec2_pod: "{{ cluster_id }}"
      ec2_pod_instance_name: head
    # There can be only one...
    exact_count: 1

    # Misc
    group: "{{ ec2_security_group }}"
    placement_group: "{{ ec2_placement_group | default(omit) }}"
    wait: yes
    wait_timeout: "{{ ec2_launch_instance_timeout }}"
  register: master

- name: Launch node instances
  ec2:
    # Required vars
    instance_type: "{{ node_instance_type }}"
    image: "{{ node_instance_ami }}"
    region: "{{ cluster_region }}"
    zone: "{{ cluster_zone }}"
    key_name: "{{ aws_keyname }}"

    # Tags
    instance_tags:
      Name: ec2_pod_node
      ec2_pod: "{{ cluster_id }}"
      ec2_pod_instance_name: node
    count_tag:
      ec2_pod: "{{ cluster_id }}"
      ec2_pod_instance_name: node
    exact_count: "{{ node_instance_count }}"

    # Misc
    group: "{{ ec2_security_group }}"
    placement_group: "{{ ec2_placement_group | default(omit) }}"
    wait: yes
    wait_timeout: "{{ ec2_launch_instance_timeout }}"
  register: nodes

- name: Wait for SSH to come up on all instances
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 0
    timeout: 360
    state: started
  # Note: tagged_instances will include launched instances
  #       and instances that were already running.
  with_items: >-
    {{ master.tagged_instances | default([]) +
       nodes.tagged_instances | default([]) }}
